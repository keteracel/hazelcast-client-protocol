{% macro encode_var_sized(param) -%}
    {% if is_var_sized_list(param.type) or is_var_sized_list_contains_nullable(param.type) -%}
        ListMultiFrameCodec.Encode{% if is_var_sized_list_contains_nullable(param.type)%}ContainsNullable{% endif %}{% if param.nullable  %}Nullable{% endif %}(clientMessage, {{ escape_keyword(param.name) }}, {{ item_type(lang_name, param.type) }}Codec.Encode)
    {%- elif is_var_sized_entry_list(param.type) -%}
        EntryListCodec.Encode(clientMessage, {{ escape_keyword(param.name) }}, {{ key_type(lang_name, param.type) }}Codec.Encode, {{ value_type(lang_name, param.type) }}Codec.Encode)
    {%- elif is_var_sized_map(param.type) -%}
        MapCodec.Encode{% if param.nullable  %}Nullable{% endif %}(clientMessage, {{ escape_keyword(param.name) }}, {{ key_type(lang_name, param.type) }}Codec.Encode, {{ value_type(lang_name, param.type) }}Codec.Encode)
    {%- else -%}
        {%- if param.nullable  -%}
            CodecUtil.EncodeNullable(clientMessage, {{ escape_keyword(param.name) }}, {{ lang_name(param.type) }}Codec.Encode)
        {%- else -%}
            {{ lang_name(param.type) }}Codec.Encode(clientMessage, {{ escape_keyword(param.name) }})
        {%- endif %}
    {% endif %}
{%- endmacro %}
{% macro decode_var_sized(param) -%}
    {%- if is_var_sized_list(param.type) or is_var_sized_list_contains_nullable(param.type) -%}
        ListMultiFrameCodec.Decode{% if is_var_sized_list_contains_nullable(param.type) %}ContainsNullable{% endif %}{% if param.nullable  %}Nullable{% endif %}(iterator, {{ item_type(lang_name, param.type) }}Codec.Decode)
    {%- elif is_var_sized_entry_list(param.type) -%}
        EntryListCodec.Decode(iterator, {{ key_type(lang_name, param.type) }}Codec.Decode, {{ value_type(lang_name, param.type) }}Codec.Decode)
    {%- elif is_var_sized_map(param.type) -%}
        MapCodec.Decode{% if param.nullable  %}Nullable{% endif %}(iterator, {{ key_type(lang_name, param.type) }}Codec.Decode, {{ value_type(lang_name, param.type) }}Codec.Decode)
    {%- else -%}
        {%- if param.nullable  -%}
            CodecUtil.DecodeNullable(iterator, {{ lang_name(param.type) }}Codec.Decode)
        {%- else -%}
            {{ lang_name(param.type) }}Codec.Decode(iterator)
        {%- endif -%}
    {%- endif -%}
{%- endmacro %}
// Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// <auto-generated>
//   This code was generated by a tool.
//     Hazelcast Client Protocol Code Generator
//     https://github.com/hazelcast/hazelcast-client-protocol
//   Change to this file will be lost if the code is regenerated.
// </auto-generated>

#pragma warning disable IDE0051 // Remove unused private members
// ReSharper disable UnusedMember.Local
// ReSharper disable RedundantUsingDirective
// ReSharper disable CheckNamespace

using System;
using System.Collections.Generic;
using Hazelcast.Protocol.BuiltInCodecs;
using Hazelcast.Protocol.CustomCodecs;
using Hazelcast.Core;
using Hazelcast.Messaging;
using Hazelcast.Logging;
using Hazelcast.Clustering;
using Hazelcast.Serialization;
using Microsoft.Extensions.Logging;
using static Hazelcast.Messaging.Portability;

{% if namespace %}
namespace {{ namespace }}
{% else %}
namespace Hazelcast.Protocol.Codecs
{% endif %}
{
    /// <summary>
    {% for line in method.doc.splitlines() %}
    /// {{ line }}
    {% endfor %}
    ///</summary>
    internal static class {{ service_name|capital }}{{ method.name|capital }}ServerCodec
    {
        public const int RequestMessageType = {{ method.request.id }}; // {{ '0x%06X'|format(method.request.id) }}
        public const int ResponseMessageType = {{ method.response.id }}; // {{ '0x%06X'|format(method.response.id) }}
    {#FIXED SIZED PARAMETER OFFSET CONSTANTS#}
    {% for param in fixed_params(method.request.params) %}
        private const int Request{{param.name|capital}}FieldOffset = {% if loop.first %}PartitionIdFieldOffset + IntSizeInBytes{% else %}Request{{ loop.previtem.name|capital}}FieldOffset + {{lang_types_decode(loop.previtem.type)|capital}}SizeInBytes{% endif %};
        {% if loop.last %}
        private const int RequestInitialFrameSize = Request{{param.name|capital}}FieldOffset + {{lang_types_decode(param.type)|capital}}SizeInBytes;
        {% endif %}
    {% else %}
        private const int RequestInitialFrameSize = PartitionIdFieldOffset + IntSizeInBytes;
    {% endfor %}
    {% for param in fixed_params(method.response.params) %}
        private const int Response{{param.name|capital}}FieldOffset = {% if loop.first %}ResponseBackupAcksFieldOffset + ByteSizeInBytes{% else %}Response{{ loop.previtem.name|capital}}FieldOffset + {{lang_types_decode(loop.previtem.type)|capital}}SizeInBytes{% endif %};
        {% if loop.last %}
        private const int ResponseInitialFrameSize = Response{{param.name|capital}}FieldOffset + {{lang_types_decode(param.type)|capital}}SizeInBytes;
        {% endif %}
    {% else %}
        private const int ResponseInitialFrameSize = ResponseBackupAcksFieldOffset + ByteSizeInBytes;
    {% endfor %}
    {% for event in method.events%}
        {% for param in fixed_params(event.params) %}
        private const int {{event.name|capital}}Event{{param.name|capital}}FieldOffset = {% if loop.first %}PartitionIdFieldOffset + IntSizeInBytes{% else %}{{ event.name|capital}}Event{{ loop.previtem.name|capital}}FieldOffset + {{lang_types_decode(loop.previtem.type)|capital}}SizeInBytes{% endif %};
        {% if loop.last %}
        private const int {{event.name|capital}}EventInitialFrameSize = {{event.name|capital}}Event{{param.name|capital}}FieldOffset + {{lang_types_decode(param.type)|capital}}SizeInBytes;
        {% endif %}
        {% else %}
        private const int {{event.name|capital}}EventInitialFrameSize = PartitionIdFieldOffset + IntSizeInBytes;
        {% endfor %}
        private const int {{event.name|capital}}EventMessageType = {{ event.id }}; // {{ '0x%06X'|format(event.id) }}
    {% endfor %}

    {#REQUEST PARAMETERS#}
        public sealed class RequestParameters
        {
    {% for param in method.request.params %}

            /// <summary>
            {% for line in param.doc.splitlines() %}
            /// {{ line }}
            {% endfor %}
            ///</summary>
            public {{ lang_types_decode(param.type) }} {{ param.name|capital }} { get; set; }
    {% endfor %}
        }
    
    {#RequestENCODE#}
        public static ClientMessage EncodeRequest({% for param in method.request.params %}{{ lang_types_encode(param.type) }} {{escape_keyword(param.name)}}{% if not loop.last %}, {% endif %}{% endfor %})
        {
            var clientMessage = CreateForEncode();
            clientMessage.IsRetryable = {{ method.request.retryable|lower }};
            clientMessage.OperationName = "{{ service_name|capital }}.{{ method.name|capital }}";
            var initialFrame = new Frame(new byte[RequestInitialFrameSize], UnfragmentedMessage);
            EncodeInt(initialFrame, TypeFieldOffset, RequestMessageType);
            EncodeInt(initialFrame, PartitionIdFieldOffset, -1);
        {% for param in fixed_params(method.request.params) %}
            Encode{{ lang_types_decode(param.type)|capital }}(initialFrame, Request{{param.name|capital}}FieldOffset, {{escape_keyword(param.name)}});
        {% endfor %}
            clientMessage.Add(initialFrame);
        {% for param in var_size_params(method.request.params) %}
            {{ encode_var_sized(param) }};
        {% endfor %}
            return clientMessage;
        }

    {#RequestDECODE#}
        public static RequestParameters DecodeRequest(ClientMessage clientMessage)
        {
            var iterator = clientMessage.GetIterator();
            var request = new RequestParameters();
            {% if  fixed_params(method.request.params)|length != 0 %}
            var initialFrame = iterator.Take();
            {% else %}
            //empty initial frame
            iterator.Take();
            {% endif %}
        {% for param in fixed_params(method.request.params) %}
            request.{{ param.name|capital }} = Decode{{ lang_types_decode(param.type)|capital }}(initialFrame, Request{{param.name|capital}}FieldOffset);
        {% endfor %}
        {% for param in var_size_params(method.request.params) %}
            request.{{ param.name|capital }} = {{ decode_var_sized(param) }};
        {% endfor %}
            return request;
        }
        
    {#RESPONSE PARAMETERS#}
        public sealed class ResponseParameters
        {
    {% for param in method.response.params %}

            /// <summary>
            {% for line in param.doc.splitlines() %}
            /// {{ line }}
            {% endfor %}
            ///</summary>
            public {{ lang_types_decode(param.type) }} {{ param.name|capital }} { get; set; }
    {% endfor %}
        }

    {#RESPONSE ENCODE#}
        public static ClientMessage EncodeResponse({% for param in method.response.params %}{{ lang_types_encode(param.type) }} {{escape_keyword(param.name)}}{% if not loop.last %}, {% endif %}{% endfor %})
        {
            var clientMessage = CreateForEncode();
            var initialFrame = new Frame(new byte[ResponseInitialFrameSize], UnfragmentedMessage);
            EncodeInt(initialFrame, TypeFieldOffset, ResponseMessageType);
        {% for param in fixed_params(method.response.params) %}
            Encode{{ lang_types_decode(param.type)|capital }}(initialFrame, Response{{param.name|capital}}FieldOffset, {{escape_keyword(param.name)}});
        {% endfor %}
            clientMessage.Add(initialFrame);
        {% for param in var_size_params(method.response.params) %}
            {{ encode_var_sized(param) }};
        {% endfor %}
            return clientMessage;
        }
    
    {#RESPONSE DECODE#}
        public static ResponseParameters DecodeResponse(ClientMessage clientMessage)
        {
            var iterator = clientMessage.GetIterator();
            var response = new ResponseParameters();
            {% if  fixed_params(method.response.params)|length != 0 %}
            var initialFrame = iterator.Take();
            {% else %}
            //empty initial frame
            iterator.Take();
            {% endif %}
        {% for param in fixed_params(method.response.params) %}
            response.{{ param.name|capital }} = Decode{{ lang_types_decode(param.type)|capital }}(initialFrame, Response{{param.name|capital}}FieldOffset);
        {% endfor %}
        {% for param in var_size_params(method.response.params) %}
            response.{{ param.name|capital }} = {{ decode_var_sized(param) }};
        {% endfor %}
            return response;
        }

    {# EVENTS#}
    {% if method.events|length != 0 %}
    {% for event in method.events%}
        public static ClientMessage Encode{{(event.name|capital)}}Event({% for param in event.params %}{{ lang_types_encode(param.type) }} {{escape_keyword(param.name)}}{% if not loop.last %}, {% endif %}{% endfor %})
        {
            var clientMessage = CreateForEncode();
            var initialFrame = new Frame(new byte[{{(event.name|capital)}}EventInitialFrameSize], UnfragmentedMessage);
            EncodeInt(initialFrame, TypeFieldOffset, {{(event.name|capital)}}EventMessageType);
            EncodeInt(initialFrame, PartitionIdFieldOffset, -1);
        {% for param in fixed_params(event.params) %}
            Encode{{ lang_types_decode(param.type)|capital }}(initialFrame, {{(event.name|capital)}}Event{{param.name|capital}}FieldOffset, {{escape_keyword(param.name)}});
        {% endfor %}
            clientMessage.Add(initialFrame);
            clientMessage.Flags |= ClientMessageFlags.Event;
        {% for param in var_size_params(event.params) %}
            {{ encode_var_sized(param) }};
        {% endfor %}
            return clientMessage;
        }
    {% endfor %}
    {% endif %}
    
    {% if method.events|length != 0 %}
        public static void HandleEvent(ClientMessage clientMessage{% for event in method.events%}, Handle{{ event.name|capital }}Event handle{{ event.name|capital }}Event{% endfor %}, ILoggerFactory loggerFactory)
        {
            var messageType = clientMessage.MessageType;
            var iterator = clientMessage.GetIterator();
        {% for event in method.events%}
            if (messageType == {{(event.name|capital)}}EventMessageType) {
            {% if  fixed_params(event.params)|length != 0 %}
                var initialFrame = iterator.Take();
            {% else %}
                //empty initial frame
                iterator.Take();
            {% endif %}
            {% for param in fixed_params(event.params) %}
                var {{escape_keyword(param.name)}} =  Decode{{ lang_types_decode(param.type)|capital }}(initialFrame, {{(event.name|capital)}}Event{{param.name|capital}}FieldOffset);
            {% endfor %}
            {% for param in var_size_params(event.params) %}
                var {{escape_keyword(param.name)}} = {{ decode_var_sized(param) }};
            {% endfor %}
                handle{{ event.name|capital }}Event({% for param in event.params %}{{escape_keyword(param.name)}}{% if not loop.last %}, {% endif %}{% endfor %});
                return;
            }
        {% endfor %}
            loggerFactory.CreateLogger(typeof(EventHandler)).LogDebug("Unknown message type received on event handler :" + messageType);
        }
    {% for event in method.events%}

        public delegate void Handle{{ event.name|capital }}Event({% for param in event.params %}{{ lang_types_encode(param.type) }} {{escape_keyword(param.name)}}{% if not loop.last %}, {% endif %}{% endfor %});
    {% endfor %}
    {% endif %}
    }
}